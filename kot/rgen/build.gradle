import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
}

group = 'mg.kot'
version = '1.0-SNAPSHOT'
description = 'mg-kot-rgen'

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
}

dependencies {

    // implementation 'mg.util:util:1.0-SNAPSHOT'
    implementation project(':mg.kot.util')

    implementation 'org.glassfish.jersey.containers:jersey-container-jetty-http:2.25'
    implementation 'org.eclipse.jetty:jetty-util:9.4.13.v20181111'
    implementation 'org.glassfish.jersey.core:jersey-server:2.25'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.25'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.13.v20181111'
    implementation 'org.eclipse.jetty:jetty-server:9.4.13.v20181111'
    implementation 'javax.xml.bind:jaxb-api:2.1'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
}

task startServer(type: JavaExec) {
    // classpath = files('build/libs/foo.jar')
    classpath += sourceSets.main.runtimeClasspath
    // main = 'mg.kot.rgen.ServerKt'
    mainClass.set('mg.kot.rgen.ServerKt')
}

apply from: '../utils.gradle'

tasks.withType(Test) {

    useJUnitPlatform()

    def failedTests = rootProject.ext.failedTests
    afterTest { descriptor, result -> utils.appendFailed(descriptor, result, failedTests) }
    afterSuite { descriptor, result -> utils.formatSummary(descriptor, result, failedTests) }

    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT

        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
    }
}
