import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
}

allprojects {

    ext.failedTests = []

    repositories {
        flatDir { dir rootProject.file('libs') }
        // mavenLocal()
        // maven { url "http://repo.maven.apache.org/maven2" }
        mavenCentral()
    }

    //noinspection GroovyAssignabilityCheck
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "11"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    group = 'mg.kot'
    version = '1.0-SNAPSHOT'

    task report(type: Exec) {
        workingDir './build/reports/tests/test'

        //on windows:
        commandLine 'cmd', '/c', 'start index.html'
    }
}

subprojects {

    tasks.withType(Test) {

        useJUnitPlatform()

        afterTest { TestDescriptor descriptor, TestResult result ->

            if (result.resultType == TestResult.ResultType.FAILURE) {
                def failedTestStr = "${descriptor.className}.${descriptor.name}".toString()
                def length = failedTestStr.length()
                failedTests << failedTestStr.substring(0, length - 2)
            }
        }

        testLogging {
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT

            exceptionFormat TestExceptionFormat.FULL
            showCauses true
            showExceptions true
            showStackTraces true
        }

        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"

                if (!failedTests.empty) {
                    def prefix = "gradle test --tests="
                    print "Failed tests: \n"
                    failedTests.each { Object failedTest ->
                        println prefix + failedTest.toString()
                    }
                    println ""
                }
            }
        }
    }
}