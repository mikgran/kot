import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
}

repositories {
    flatDir { dir rootProject.file('libs') }
    // mavenLocal()
    // maven { url "http://repo.maven.apache.org/maven2" }
    mavenCentral()
}

description = 'mg-kot-util'

dependencies {

    // implementation 'mg.util:util:1.0-SNAPSHOT'

    // https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp
    implementation group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'

    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    implementation group: 'mysql', name: 'mysql-connector-java', version: '5.1.17'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    // implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.16.1'

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.8.20'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
}

ext.failedTests = []

test {

    useJUnitPlatform()

    afterTest { TestDescriptor descriptor, TestResult result ->

        if (result.resultType == TestResult.ResultType.FAILURE) {
            def failedTestStr = "${descriptor.className}.${descriptor.name}".toString()
            def length = failedTestStr.length()
            failedTests << failedTestStr.substring(0, length - 2)
        }
    }

    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT

        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"

            if (!failedTests.empty) {
                def prefix = "gradle test --tests="
                print "Failed tests: \n"
                failedTests.each { Object failedTest ->
                    println prefix + failedTest.toString()
                }
                println ""
            }
        }
    }
}